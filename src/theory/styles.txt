📘 React Styling – Full Summary (All-in-One Guide)

──────────────────────────────────────────────
🔹 STYLING METHODS IN REACT
──────────────────────────────────────────────

1. ✅ Inline Styles
   - Syntax: <div style={{ color: 'red' }}>Hi</div>
   - Pros: Dynamic, native JS
   - Cons: No pseudo-selectors or media queries
   - Use When: Quick prototypes or dynamic calculations

2. ✅ CSS Files (.css)
   - Syntax: className + import './style.css'
   - Pros: Familiar, fast
   - Cons: Global scope causes style clashes
   - Use When: Small apps, static websites, legacy code

3. ✅ CSS Modules (.module.css)
   - Syntax: import styles from './Comp.module.css'
   - Pros: Scoped per component, prevents clashing
   - Cons: Cannot use props for styling
   - Use When: Mid to large apps needing clean separation

4. ✅ SCSS / LESS
   - Syntax: Nesting, variables, mixins
   - Pros: Powerful syntax
   - Cons: Global unless combined with Modules
   - Use When: Designer-heavy teams, complex UIs

5. ✅ Styled-Components
   - Syntax: const Btn = styled.button`color: red;`
   - Pros: Dynamic via props, scoped
   - Cons: Runtime overhead, bundle size
   - Use When: Design systems, reusable components

6. ✅ Emotion
   - Syntax: css or styled from '@emotion/react'
   - Pros: Fast, theme support, scoped
   - Cons: Minor runtime (less than styled-components)
   - Use When: Need dynamic styling + performance

7. ✅ Tailwind CSS
   - Syntax: className="text-red-500 p-4"
   - Pros: Utility-first, fast, consistent
   - Cons: Verbose JSX, custom styles need config
   - Use When: Rapid development, consistent design

8. ✅ Vanilla Extract (Advanced)
   - Syntax: styles.css.ts with typed CSS
   - Pros: Zero runtime, scoped, type-safe
   - Cons: Complex setup
   - Use When: Enterprise apps, strict performance

9. ✅ UI Library `sx` or `style` prop
   - Syntax: <Box sx={{ p: 2, color: 'primary.main' }} />
   - Pros: Theme-aware, fast, co-located
   - Cons: Framework-dependent (MUI, Chakra)
   - Use When: Using MUI/Chakra or other design systems

──────────────────────────────────────────────
🔹 STYLE CLASHING EXPLAINED
──────────────────────────────────────────────

❌ Problem:
- Global styles (CSS, SCSS) can clash:
  e.g. two `.button` classes override each other

✅ Solutions:
1. Use **CSS Modules**: auto-generates unique class names
2. Use **Styled-Components / Emotion**: styles scoped per component
3. Use **Tailwind CSS**: utility classes, no custom class names
4. Use **BEM naming** if using plain CSS: e.g., `.modal__button`

🔁 What Causes Clashing?

| Styling Type      | Scoped? | Clashing Risk |
|------------------|---------|----------------|
| CSS (.css)       | No      | ✅ High         |
| SCSS / LESS      | No      | ✅ High         |
| CSS Modules      | Yes     | ❌ None         |
| Styled-Components| Yes     | ❌ None         |
| Emotion          | Yes     | ❌ None         |
| Tailwind         | N/A     | ❌ None         |

──────────────────────────────────────────────
🔹 WHEN TO USE WHAT (CHEAT SHEET)
──────────────────────────────────────────────

| Use Case                            | Recommended Styling          |
|------------------------------------|------------------------------|
| Small/Demo App                     | Inline / CSS Modules         |
| Mid-Sized App                      | CSS Modules / Emotion        |
| Design System                      | Styled-Components / Emotion  |
| Performance-Critical               | Vanilla Extract / Tailwind   |
| With MUI or Chakra UI              | sx prop / Emotion            |
| Dynamic Styling via Props          | Emotion / Styled-Components  |
| Legacy Project                     | SCSS / LESS / Global CSS     |

──────────────────────────────────────────────
🔹 IDEAL SETUP FOR LARGE REACT APP
──────────────────────────────────────────────

🧩 Hybrid Setup:
- ✅ CSS Modules for scoped file-based styles
- ✅ `clsx` for conditional class logic
- ✅ Design Tokens (CSS vars or theme.ts)
- ✅ Optional: Emotion/styled-components for dynamic styles

📁 Structure:
components/
  └── Button/
        ├── Button.tsx
        ├── Button.module.css
        └── tokens.ts or theme.ts

🔧 Example:
Button.module.css
.button { background: blue; }
.outline { border: 2px solid blue; }

Button.tsx
import styles from './Button.module.css';
import clsx from 'clsx';
<button className={clsx(styles.button, outline && styles.outline)} />

──────────────────────────────────────────────
✅ Final Thoughts:
──────────────────────────────────────────────
- Avoid global `.css` or `.scss` for components
- Prefer **scoped**, **modular**, and **theme-friendly** styles
- Tailor your stack to your team's skills and project scale

──────────────────────────────────────────────
